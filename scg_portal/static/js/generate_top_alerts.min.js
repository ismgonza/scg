function generateTopAlertsTable(data, currentPage = 1, pageSize = 10, containerId = 'top_alerts') {
    // Filter alert reports for risk categories Critical, High, Medium, Low, and Informational
    const filteredReports = data.filter(entry => ['Critical', 'High', 'Medium', 'Low', 'Informational'].includes(entry.risk_category));
    
    // Count occurrences of each subject for each risk category
    const counts = {};
    filteredReports.forEach(entry => {
        const { subject, risk_category } = entry;
        const key = `${subject}_${risk_category}`;
        counts[key] = (counts[key] || 0) + 1;
    });

    // Convert counts object into an array
    const countsArray = Object.keys(counts).map(key => {
        const [subject, riskCategory] = key.split('_');
        return { subject, risk_category: riskCategory, count: counts[key] };
    });

    // Sort countsArray by risk category and count in descending order
    countsArray.sort((a, b) => {
        // Define the order of risk categories
        const riskCategoryOrder = ['Critical', 'High', 'Medium', 'Low', 'Informational'];

        // Get the indices of risk categories in the order array
        const indexA = riskCategoryOrder.indexOf(a.risk_category);
        const indexB = riskCategoryOrder.indexOf(b.risk_category);

        // If risk categories are different, sort by their indices
        if (indexA !== indexB) {
            return indexA - indexB;
        } else {
            // If risk categories are the same, sort by count in descending order
            return b.count - a.count;
        }
    });

    // Pagination
    const totalPages = Math.ceil(countsArray.length / pageSize);
    const startPage = Math.max(1, currentPage - 2);
    const endPage = Math.min(startPage + 4, totalPages);
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const paginatedData = countsArray.slice(startIndex, endIndex);

    // Create table HTML
    let tableHTML = '<table class="table table-striped" id="paginated-list" data-current-page="' + currentPage + '">';
    tableHTML += '<tr><th>Vulnerability Name</th><th>Risk Category</th><th>Count</th></tr>';
    paginatedData.forEach((item) => {
        // Define cell color based on risk category
        let cellColor;
        switch (item.risk_category) {
            case 'Critical':
                cellColor = 'rgba(112,48,160,0.5)';
                break;
            case 'High':
                cellColor = 'rgba(192,1,0,0.5)';
                break;
            case 'Medium':
                cellColor = 'rgba(255,153,50,0.5)';
                break;
            case 'Low':
                cellColor = 'rgba(255,204,3,0.5)';
                break;
            case 'Informational':
                cellColor = 'rgba(153,204,2,0.5)';
                break;
            default:
                cellColor = '';
        }

        // Generate table row with risk category cell colored
        tableHTML += `<tr><td>${item.subject}</td><td style="background-color: ${cellColor}">${item.risk_category}</td><td>${item.count}</td></tr>`;
    });
    tableHTML += '</table>';

    // Pagination controls
    let paginationHTML = '<nav class="d-xl-flex justify-content-xl-end">';
    paginationHTML += '<ul class="pagination pagination-sm">';
    paginationHTML += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}"><a class="page-link" aria-label="Previous" href="#" data-page="${currentPage - 1}"><span aria-hidden="true">«</span></a></li>`;
    for (let i = startPage; i <= endPage; i++) {
        paginationHTML += `<li class="page-item ${currentPage === i ? 'active' : ''}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
    }
    paginationHTML += `<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}"><a class="page-link" aria-label="Next" href="#" data-page="${currentPage + 1}"><span aria-hidden="true">»</span></a></li>`;
    paginationHTML += '</ul></nav>';

    // Append table and pagination HTML to the specified container
    document.getElementById(containerId).innerHTML = tableHTML + paginationHTML;

    // Add event listener to pagination links
    const paginationLinks = document.querySelectorAll(`#${containerId} .pagination a`);
    paginationLinks.forEach(link => {
        link.addEventListener('click', function(event) {
            event.preventDefault();
            const page = parseInt(this.getAttribute('data-page'));
            generateTopAlertsTable(data, page, pageSize, containerId);
        });
    });
}

window.generateTopAlertsTable = generateTopAlertsTable;
