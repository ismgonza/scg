window.onload = function() {
    console.log("Pathname:", window.location.pathname);
    
    // Extract the report id from the URL
    // depends on the actual URL and where the id is positioned
    // needs adjustment when using bucket
    var parts = window.location.pathname.split('/');
    console.log("Split parts:", parts);
    var reportId = parts[4].split('_')[0];
    console.log("Report id:", reportId);

    // Fetch the JSON data
    fetch(`/static/reports/${reportId}.json`)
        .then(response => response.json())
        .then(data => {
            console.log("JSON data:", data);

            // Extract target hosts
            var targetHosts = data.target;

            // Insert target hosts into span
            var targetHostsSpan = document.getElementById('target_hosts');
            if (targetHostsSpan) {
                targetHostsSpan.innerText = targetHosts.join(', ');
            } else {
                console.error('Target hosts span not found.');
            }

            // Create object to store IPs by alert subject
            var ipMap = {};
            // Group IPs by alert subject
            data.alert_report.forEach(alert => {
                if (!(alert.subject in ipMap)) {
                    ipMap[alert.subject] = new Set(); // Use a Set to store unique IPs
                }
                ipMap[alert.subject].add(alert.target_affected);
            });

            // Sort alert items based on risk category
            data.alert_report.sort((a, b) => {
                const order = {
                    Critical: 1,
                    High: 2,
                    Medium: 3,
                    Low: 4,
                    Informational: 5
                };
                return order[a.risk_category] - order[b.risk_category];
            });

            // Group alert items by risk category and remove duplicates
            var alertsByCategory = {};
            data.alert_report.forEach(alert => {
                if (!(alert.risk_category in alertsByCategory)) {
                    alertsByCategory[alert.risk_category] = new Set(); // Use a Set to store unique alert subjects
                }
                alertsByCategory[alert.risk_category].add(alert.subject);
            });

            // Create main accordion for alerts by category
            var mainCategoryAccordion = createCategoryAccordion(alertsByCategory, data.alert_report, ipMap);

            // Find the existing div with the class 'report-alerts-by-category' and append the main accordion to it
            var reportAlertsCategoryDiv = document.querySelector('.report-alerts-by-category');
            if (reportAlertsCategoryDiv) {
                reportAlertsCategoryDiv.appendChild(mainCategoryAccordion);
            } else {
                console.error('Report alerts by category div not found.');
            }

            // Group alerts by "Targets Affected" and remove duplicates
            var alertsByHost = {};
            data.alert_report.forEach(alert => {
                alert.target_affected.split(',').forEach(ip => {
                    if (!(ip in alertsByHost)) {
                        alertsByHost[ip] = new Set(); // Use a Set to store unique alerts for each IP
                    }
                    alertsByHost[ip].add(JSON.stringify(alert)); // Stringify the alert object to ensure uniqueness
                });
            });

            // Convert alertsByHost back to the original object structure (without stringification)
            Object.keys(alertsByHost).forEach(ip => {
                alertsByHost[ip] = Array.from(alertsByHost[ip]).map(alert => JSON.parse(alert));
            });

            // Create accordion for alerts by host
            var mainHostAccordion = createHostAccordionAccordion(alertsByHost);

            // Find the existing div with the class 'report-alerts-by-host' and append the main accordion to it
            var reportAlertsHostDiv = document.querySelector('.report-alerts-by-host');
            if (reportAlertsHostDiv) {
                reportAlertsHostDiv.appendChild(mainHostAccordion);
            } else {
                console.error('Report alerts by host div not found.');
            }
        })
        .catch(error => console.error('Error:', error));
};

function createCategoryAccordion(alertsByCategory, alerts, ipMap) {
    var accordion = document.createElement('div');
    accordion.classList.add('accordion', 'accordion-category');
    accordion.setAttribute('role', 'tablist');

    // Create accordion items for each risk category
    Object.keys(alertsByCategory).forEach((category, index) => {
        var categoryAccordion = createCategoryAccordionItem(category, Array.from(alertsByCategory[category]), alerts, index, ipMap);
        accordion.appendChild(categoryAccordion);
    });

    return accordion;
}

function createCategoryAccordionItem(category, subjects, alerts, index, ipMap) {
    var accordionId = `accordion-category-${index}`;
    var accordion = document.createElement('div');
    accordion.id = accordionId;
    accordion.classList.add('accordion-item', 'accordion-category-item');

    var header = document.createElement('h2');
    header.classList.add('accordion-header');
    header.setAttribute('role', 'tab');

    var button = document.createElement('button');
    button.classList.add('accordion-button');
    button.setAttribute('type', 'button');
    button.setAttribute('data-bs-toggle', 'collapse');
    button.setAttribute('data-bs-target', `#${accordionId} .accordion-category-collapse`);
    button.setAttribute('aria-expanded', 'false');
    button.setAttribute('aria-controls', `${accordionId} .accordion-category-collapse`);
    button.innerText = `${category} (${subjects.length})`; // Show the number of subjects

    var backgroundColor = getBackgroundColor(category);
    button.style.backgroundColor = backgroundColor;

    header.appendChild(button);

    var collapse = document.createElement('div');
    collapse.classList.add('accordion-collapse', 'collapse', 'accordion-category-collapse');
    collapse.setAttribute('role', 'tabpanel');

    var body = document.createElement('div');
    body.classList.add('accordion-body');

    // Create sub-accordion for alerts within this category
    var subAccordion = createSubAccordion(subjects, alerts, index, ipMap);

    body.appendChild(subAccordion);
    collapse.appendChild(body);
    accordion.appendChild(header);
    accordion.appendChild(collapse);

    return accordion;
}

function createSubAccordion(subjects, alerts, index, ipMap) {
    var subAccordionId = `sub-accordion-${index}`;
    var subAccordion = document.createElement('div');
    subAccordion.id = subAccordionId;
    subAccordion.classList.add('accordion', 'accordion-sub');
    subAccordion.setAttribute('role', 'tablist');

    var bodyMap = {}; // Track if body content has already been created for each subject

    // Create accordion items for each alert subject
    subjects.forEach((subject, subjectIndex) => {
        var item = document.createElement('div');
        item.classList.add('accordion-item');

        var header = document.createElement('h2');
        header.classList.add('accordion-header');
        header.setAttribute('role', 'tab');

        var button = document.createElement('button');
        button.classList.add('accordion-button');
        button.setAttribute('type', 'button');
        button.setAttribute('data-bs-toggle', 'collapse');
        button.setAttribute('data-bs-target', `#${subAccordionId} .item-${subjectIndex}`);
        button.setAttribute('aria-expanded', 'false');
        button.setAttribute('aria-controls', `${subAccordionId} .item-${subjectIndex}`);
        button.innerText = subject;

        header.appendChild(button);

        var collapse = document.createElement('div');
        collapse.classList.add('accordion-collapse', 'collapse', 'item-' + subjectIndex);
        collapse.setAttribute('role', 'tabpanel');

        var body = document.createElement('div');
        body.classList.add('accordion-body');

        // Check if body content has already been created for this subject
        if (!(subject in bodyMap)) {
            // Add the rest of the content
            var paragraph = document.createElement('p');
            paragraph.classList.add('mb-0');
            paragraph.style.textAlign = 'left'; // Align text to left

            // Filter alerts for the current subject
            var filteredAlerts = alerts.filter(alert => alert.subject === subject);

            // Convert Set to array and join IPs with comma
            var uniqueIPs = Array.from(ipMap[subject]);
            paragraph.innerHTML = `
                <strong>Rating</strong>: ${filteredAlerts[0].risk_category}<br><br>
                <strong>CVSS Score</strong>: ${filteredAlerts[0].cvss3_core}<br><br>
                <strong>Description</strong>:<br>${filteredAlerts[0].description.replace(/\n/g, '<br>')}<br><br>
                <strong>Recommended Solution</strong>:<br>${filteredAlerts[0].solution}<br><br>
                <strong>Reference</strong>:<br>${makeReferenceLink(filteredAlerts[0].reference)}<br>
                <strong>Targets Affected</strong>: ${uniqueIPs.join(', ')}<br>
            `;
            body.appendChild(paragraph);

            bodyMap[subject] = true; // Mark body content as created for this subject
        }

        collapse.appendChild(body);
        item.appendChild(header);
        item.appendChild(collapse);
        subAccordion.appendChild(item);
    });

    return subAccordion;
}

function makeReferenceLink(reference) {
    // Split the reference string by space or new line
    var references = reference.split(/\s+/);
    var referenceHTML = '';

    references.forEach(url => {
        // Check if the reference is a valid URL
        if (isValidURL(url)) {
            referenceHTML += `<li><a href="${url}" target="_blank">${url}</a></li>`;
        } else {
            referenceHTML += `<li>${url}</li>`;
        }
    });

    // Wrap the bulleted links in an unordered list
    if (referenceHTML !== '') {
        referenceHTML = '<ul>' + referenceHTML + '</ul>';
    }

    return referenceHTML;
}

function isValidURL(string) {
    // Regular expression for URL validation
    var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
        '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
        '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
    return pattern.test(string);
}

function getBackgroundColor(category) {
    switch (category) {
        case 'Critical':
            return 'rgba(112,48,160,0.7)';
        case 'High':
            return 'rgba(192,1,0,0.7)';
        case 'Medium':
            return 'rgba(255,153,50,0.7)';
        case 'Low':
            return 'rgba(255,204,3,0.7)';
        case 'Informational':
            return 'rgba(153,204,2,0.7)';
        default:
            return 'rgba(0,0,0,0)'; // Default transparent background
    }
}

function createHostAccordionAccordion(alertsByHost) {
    var accordion = document.createElement('div');
    accordion.classList.add('accordion', 'accordion-host');
    accordion.setAttribute('role', 'tablist');

    // Create accordion item for "Vulnerability by Hosts"
    var accordionItem = document.createElement('div');
    accordionItem.classList.add('accordion-item');

    var header = document.createElement('h2');
    header.classList.add('accordion-header');
    header.setAttribute('role', 'tab');

    var button = document.createElement('button');
    button.classList.add('accordion-button');
    button.setAttribute('type', 'button');
    button.setAttribute('data-bs-toggle', 'collapse');
    button.setAttribute('data-bs-target', '.accordion-host-collapse');
    button.setAttribute('aria-expanded', 'false');
    button.setAttribute('aria-controls', 'accordion-host-collapse');
    button.setAttribute('data-i18n', 'sec_report_dash.accordion_vuln_by_host');
    button.innerText = 'Vulnerability by Hosts';

    header.appendChild(button);
    accordionItem.appendChild(header);

    // Create collapse element for "Vulnerability by Hosts"
    var collapse = document.createElement('div');
    collapse.classList.add('accordion-collapse', 'collapse', 'accordion-host-collapse', 'collapsed');
    collapse.setAttribute('role', 'tabpanel');

    var body = document.createElement('div');
    body.classList.add('accordion-body');

    // Create accordion items for each host
    Object.keys(alertsByHost).forEach((host, index) => {
        var hostAccordion = createHostAccordion(host, Array.from(alertsByHost[host]), index);
        body.appendChild(hostAccordion);
    });

    collapse.appendChild(body);
    accordionItem.appendChild(collapse);
    accordion.appendChild(accordionItem);

    return accordion;
}

function createHostAccordion(host, hostAlerts, index) {
    var hostAccordion = document.createElement('div');
    hostAccordion.classList.add('accordion-item');

    var header = document.createElement('h2');
    header.classList.add('accordion-header');
    header.setAttribute('role', 'tab');

    var button = document.createElement('button');
    button.classList.add('accordion-button');
    button.setAttribute('type', 'button');
    button.setAttribute('data-bs-toggle', 'collapse');
    button.setAttribute('data-bs-target', `#host-accordion-${index}`);
    button.setAttribute('aria-expanded', 'false');
    button.setAttribute('aria-controls', `host-accordion-${index}`);
    button.innerText = host;

    header.appendChild(button);
    hostAccordion.appendChild(header);

    var collapse = document.createElement('div');
    collapse.classList.add('accordion-collapse', 'collapse');
    collapse.setAttribute('id', `host-accordion-${index}`);
    collapse.setAttribute('role', 'tabpanel');
    collapse.setAttribute('aria-labelledby', `host-${index}`);

    var body = document.createElement('div');
    body.classList.add('accordion-body', 'table-responsive');

    // Create table for alerts aggregated by host
    var table = document.createElement('table');
    table.classList.add('table', 'table-striped');

    // Create table headers
    var headerRow = document.createElement('tr');
    ['Vulnerability', 'Risk Rating', 'CVSS Score'].forEach(header => {
        var th = document.createElement('th');
        th.innerText = header;
        headerRow.appendChild(th);
    });
    table.appendChild(headerRow);

    // Create table rows
    var uniqueAlerts = new Set(hostAlerts); // Use a Set to remove duplicates
    uniqueAlerts.forEach(alert => {
        var row = document.createElement('tr');
        ['subject', 'risk_category', 'cvss3_core'].forEach(attr => {
            var td = document.createElement('td');
            td.innerText = alert[attr];
            if (attr === 'risk_category') {
                td.style.backgroundColor = getBackgroundColor(alert[attr]);
            }
            row.appendChild(td);
        });
        table.appendChild(row);
    });

    body.appendChild(table);
    collapse.appendChild(body);
    hostAccordion.appendChild(collapse);

    return hostAccordion;
};
