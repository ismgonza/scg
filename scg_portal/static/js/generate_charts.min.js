function getOSCounts(alerts) {
    const osCounts = {};
    alerts.forEach(alert => {
        const os = alert.os;
        if (!osCounts[os]) {
            osCounts[os] = 0;
        }
        osCounts[os]++;
    });
    return osCounts;
}

function calculateCounts(alerts) {
    const counts = {
        Critical: 0,
        High: 0,
        Medium: 0,
        Low: 0,
        Informational: 0
    };

    alerts.forEach(alert => {
        counts[alert.risk_category]++;
    });

    return counts;
}

function drawChart(ctx, counts) {
    // Destroy existing chart instance if it exists
    if (ctx.chart) {
        ctx.chart.destroy();
    }
    
    const labels = Object.keys(counts);
    const values = Object.values(counts);
    const colors = {
        Critical: 'rgba(112,48,160,0.5)',
        High: 'rgba(192,1,0,0.5)',
        Medium: 'rgba(255,153,50,0.5)',
        Low: 'rgba(255,204,3,0.5)',
        Informational: 'rgba(153,204,2,0.5)'
    };

    const data = {
        labels: labels,
        datasets: [{
            data: values,
            backgroundColor: labels.map(label => colors[label]),
            borderWidth: 1,
            borderColor: [
                'rgb(112,48,160)',
                'rgb(192,1,0)',
                'rgb(255,153,50)',
                'rgb(255,204,3)',
                'rgb(153,204,2)'
            ],
            barThickness: 40
        }]
    };

    const config = {
        type: 'bar',
        data: data,
        options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false,
                },
            },
            scales: {
                x: {
                    stacked: true,
                    ticks: {
                        beginAtZero: true,
                        color: 'black'
                    },
                    grid: {
                        color: 'rgba(0, 0, 0, 0.1)'
                    },
                },
                y: {
                    stacked: true,
                    ticks: {
                        color: 'black'
                    },
                    grid: {
                        color: 'rgba(0, 0, 0, 0.1)'
                    }
                }
            },
            layout: {
                padding: {
                    left: 5,
                    right: 50,
                    top: 0,
                    bottom: 0
                }
            }
        }
    };

    Chart.defaults.font.size = 12;
    ctx.chart = new Chart(ctx, config);
}

function drawPieChart(ctx, osCounts) {
    // Destroy existing chart instance if it exists
    if (ctx.chart) {
        ctx.chart.destroy();
    }

    const labels = Object.keys(osCounts);
    const data = Object.values(osCounts);
    const colors = [
        'rgba(255, 99, 132, 0.5)',
        'rgba(54, 162, 235, 0.5)',
        'rgba(255, 206, 86, 0.5)',
        'rgba(75, 192, 192, 0.5)',
        'rgba(153, 102, 255, 0.5)',
        'rgba(255, 159, 64, 0.5)',
        'rgba(231,233,237,0.5)',
        'rgba(255,205,210,0.5)',
        'rgba(121,134,203,0.5)',
        'rgba(220,231,117,0.5)'
    ];

    const config = {
        type: 'pie',
        data: {
            labels: labels,
            datasets: [{
                data: data,
                backgroundColor: colors
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false
        }
    };

    ctx.chart = new Chart(ctx, config);
}

window.getOSCounts = getOSCounts;
window.calculateCounts = calculateCounts;
window.drawChart = drawChart;
window.drawPieChart = drawPieChart;